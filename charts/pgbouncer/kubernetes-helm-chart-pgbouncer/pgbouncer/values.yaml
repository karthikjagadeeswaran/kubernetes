# For all pgbouncer config, please check https://www.pgbouncer.org/config.html
# Deployment values for pgbouncer
replicaCount: 1
internalPort: 5432
servicePort: 5432
antiAffinity: soft
nodeAffinity: {} # optionally define nodeAffinity
tolerations: [] # optionally define tolerations
nodeSelector: {} # optionally define nodeSelector

poolMode: session

budget:
  # PodDisruptionBudget spec.minAvailable
  minAvailable: 0

image:
  repository: cradlepoint/pgbouncer
  tag: 1.0.1
  pullPolicy: IfNotPresent

imagePullSecrets: []

databases: 
  postgres_db: 
    host: haproxy.haproxy.default.svc.cluster.local
    port: 7779
    user: postgres
    dbname: postgres
    #auth_user: postgres
  backup_db:
    host: haproxy.haproxy.default.svc.cluster.local
    port: 7779
    user: postgres
    dbname: back_up
  airflow_db: 
    host: haproxy.haproxy.default.svc.cluster.local
    port: 7779
    user: postgres
    dbname: airflow
   # auth_user: postgres
  keycloak_db: 
    host: haproxy.haproxy.default.svc.cluster.local
    port: 7779
    user: keycloakuser
    dbname: registry
    
  flowable_db:
    host: haproxy.haproxy.default.svc.cluster.local
    port: 7779
    user: postgres
    dbname: registry
  registry_db:
    host: haproxy.haproxy.default.svc.cluster.local
    port: 7779
    user: postgres
    dbname: registry

  insight_db:
    host: haproxy.haproxy.default.svc.cluster.local
    port: 7779
    user: insightuser
    dbname: registry

  biviz_db:
    host: haproxy.haproxy.default.svc.cluster.local
    port: 7779
    user: bivizuser
    dbname: registry

  nifi_db:
    host: haproxy.haproxy.default.svc.cluster.local
    port: 7779
    user: nifiuser
    dbname: registry

  wims:
    host: haproxy.haproxy.default.svc.cluster.local
    port: 7779
    user: postgres
    dbname: wims

  wims_insight_db:
    host: haproxy.haproxy.default.svc.cluster.local
    port: 7779
    user: wimsinsightuser
    dbname: wims

  wims_biviz_db:
    host: haproxy.haproxy.default.svc.cluster.local
    port: 7779
    user: wimsbivizuser
    dbname: wims

  test_db:
    host: haproxy.haproxy.default.svc.cluster.local
    port: 7779
    user: postgres
    dbname: test

  test_insight_db:
    host: haproxy.haproxy.default.svc.cluster.local
    port: 7779
    user: testinsightuser
    dbname: test

  test_biviz_db:
    host: haproxy.haproxy.default.svc.cluster.local
    port: 7779
    user: testbivizuser
    dbname: test
  iam_db:
    host: haproxy.haproxy.default.svc.cluster.local
    port: 7779
    user: postgres
    dbname: iam

  test1_db:
    host: haproxy.haproxy.default.svc.cluster.local
    port: 7779
    user: postgres
    dbname: test1

  # iam_db:
  #   host: haproxy-test
  #   port: 7778
  #   user: postgres
  #   dbname: iam
#  name:
#    host: host
#    port: port
#    user: user
#    dbname: dbname
#    auth_user: pgbouncer


# list of users to connect to database, You can get by running this query
# psql -Atq -U postgres -d postgres -c "SELECT concat('\"', usename, '\" \"', passwd, '\"') FROM pg_shadow"
users: {
   postgres: postgres,
   keycloakuser: keycloakUser,
   insightuser: insightUser,
   bivizuser: bivizUser,
   flowableuser: flowableUser,
   wimsinsightuser: wimsinsightUser,
   wimsbivizuser: wimsbivizUser,
   testinsightuser: testinsightUser,
   testbivizuser: testbivizUser,
   nifiuser: nifiUser
   }
#  username: password

# Custom pgbouncer.ini
settings:
  auth_type: plain
  #  use when you need need to get md5 password hashes for database users, for more information please check https://www.2ndquadrant.com/en/blog/pg-phriday-securing-pgbouncer/

  #  CREATE SCHEMA pgbouncer AUTHORIZATION pgbouncer;
  #  CREATE OR REPLACE FUNCTION pgbouncer.get_auth(p_usename TEXT)
  #  RETURNS TABLE(username TEXT, password TEXT) AS
  #  $$
  #  BEGIN
  #  RAISE WARNING 'PgBouncer auth request: %', p_usename;
  #  RETURN QUERY
  #  SELECT usename::TEXT, passwd::TEXT FROM pg_catalog.pg_shadow
  #  WHERE usename = p_usename;
  #  END;
  #  $$ LANGUAGE plpgsql SECURITY DEFINER;
  auth_query: SELECT * FROM pgbouncer.get_auth($1) 

connectionLimits:
  maxClientConn: 200
  defaultPoolSize: 200
  minPoolSize: 15
  reservePoolSize: 25
  reservePoolTimeout: 3600

spec:
  labels: {}
  annotations:
    {}
    # Add custom pod annotations here
    # Annotations are converted to a JSON string and run through
    # the helm `tpl` function. Then converted back to a map and
    # rendered as YAML. This allows usage of go template directives
    # in your annotations.

# Add custom deployment labels here
labels: {}

logConnections: 0
logDisconnections: 0
logStats: 0
logPoolerErrors: 1
verbose: 0
statsPeriod: 60
serverLifetime: 60000
serverIdleTimeout: 60000
serverConnectTimeout: 35
serverLoginRetry: 20
queryTimeout: 0
queryWaitTimeout: 60000
clientIdleTimout: 0
clientLoginTimeout: 60

# add key: value map entries to customSettings to be added to pbgouncer.ini [pgbouncer] section
# customSettings: {}
customSettings:
  server_tls_sslmode: require
  # ignore_startup_parameters: extra_float_digits

# Service configuration
service:
  enabled: true
  type: NodePort
  name: ""
  annotations: {}

global:
  # optionally use namespace as dbname
  namespacedDatabases: false
